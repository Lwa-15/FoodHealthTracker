#pragma once
#include "pch.h" //link the pre-compiled file to this file
#include <iostream>
#include <fstream>
#include <sstream> //links to the StringStream file so the data can be parsed after it has been read from the CSV file
#include <string>
#include "HomePage.h" //links the two files together so the user can navigate back to the HomePage when the "btnBack" event is executed
// Lines 11 - 97 are automatically generated by the system(except from lines 20-23, 28 and 33- 37)
//Comments of these generated lines of code are explanations of what the code does which I found by looking through the documentation, these explanations can be found in the "AddFoodItem.h" header file

namespace HealthFoodProject {
	using namespace std;
	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;

	struct Nutrient { //Declares the struct Nutrient to be used througout the NutrientSort_Load event 
		string Name;
		string Total;
	};

	public ref class NutrientSort : public System::Windows::Forms::Form
	{
	public:
		Form^ HomePage; //Lines 28 and 33-37 are adapted from code found in the video "How to switch first form to second and second to first form in GUI C++ using MS visual Studio 2013. – by Ozair Khan"
		NutrientSort(void)
		{
			InitializeComponent();
		}
		NutrientSort(Form^ HomePageShow)
		{
			HomePage = HomePageShow;
			InitializeComponent();
		}

	protected:
		~NutrientSort()
		{
			if (components)
			{
				delete components;
			}
		}
	private: System::Windows::Forms::ListBox^ lstNutrients;
	protected:
	private: System::Windows::Forms::Button^ btnBack;
	private: System::Windows::Forms::Label^ lblNutrients;

	private:
		System::ComponentModel::Container ^components;

#pragma region Windows Form Designer generated code
		void InitializeComponent(void)
		{
			this->lstNutrients = (gcnew System::Windows::Forms::ListBox());
			this->btnBack = (gcnew System::Windows::Forms::Button());
			this->lblNutrients = (gcnew System::Windows::Forms::Label());
			this->SuspendLayout();
			// lstNutrients
			this->lstNutrients->FormattingEnabled = true;
			this->lstNutrients->Location = System::Drawing::Point(13, 38);
			this->lstNutrients->Name = L"lstNutrients";
			this->lstNutrients->Size = System::Drawing::Size(259, 186);
			this->lstNutrients->TabIndex = 7;
			// btnBack
			this->btnBack->Location = System::Drawing::Point(16, 230);
			this->btnBack->Name = L"btnBack";
			this->btnBack->Size = System::Drawing::Size(75, 23);
			this->btnBack->TabIndex = 6;
			this->btnBack->Text = L"Back";
			this->btnBack->UseVisualStyleBackColor = true;
			this->btnBack->Click += gcnew System::EventHandler(this, &NutrientSort::btnBack_Click);
			// lblNutrients
			this->lblNutrients->AutoSize = true;
			this->lblNutrients->Location = System::Drawing::Point(13, 8);
			this->lblNutrients->Name = L"lblNutrients";
			this->lblNutrients->Size = System::Drawing::Size(83, 13);
			this->lblNutrients->TabIndex = 5;
			this->lblNutrients->Text = L"Nutrients Sorted";
			// NutrientSort
			this->AutoScaleDimensions = System::Drawing::SizeF(6, 13);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->ClientSize = System::Drawing::Size(284, 261);
			this->Controls->Add(this->lstNutrients);
			this->Controls->Add(this->btnBack);
			this->Controls->Add(this->lblNutrients);
			this->Name = L"NutrientSort";
			this->Text = L"NutrientSort";
			this->Load += gcnew System::EventHandler(this, &NutrientSort::NutrientSort_Load);
			this->ResumeLayout(false);
			this->PerformLayout();

		}
#pragma endregion
	private: System::Void btnBack_Click(System::Object^ sender, System::EventArgs^ e) { //This method runs when the object "btnBack" is clicked and hides the NutrientSort form and opens the HomePage form
		this->Hide(); //Lines 99 and 100 are adapted from code found in the video "How to switch first form to second and second to first form in GUI C++ using MS visual Studio 2013. – by Ozair Khan"
		HomePage->Show();
	}
	private: System::Void NutrientSort_Load(System::Object^ sender, System::EventArgs^ e) { //This method will execute when the object "btnNutrientInfo" is clicked in the HomePage form and this reads in all the data from the file, parses it and sorts the data before displaying the data and advising the user depending on the sorted data
		Nutrient Temp; //Declares a struct which is used as a Temp struct while sorting the array of structs later in the event
		Nutrient Nutrients[7]; //Declares the array of structs to be used in order to store and sort the nutrient groups
		ifstream OpenCSV;
		OpenCSV.open("CSV Files/FoodDiary.csv"); //Establishes a connection to the FoodDiary.csv file to read data from
		string Record; //The following variables are declared in order to store data used inside this method
		string Value, Date, FoodName;
		String^ SystemWarning;
		String^ SystemAdvice;
		string NutrientName;
		string Warning;
		string Advice; 
		String^ SystemFoodName;
		int NutrientIndex;
		string ParsedNutrient;

		while (OpenCSV.good()) { //while the file is not EOF and the connection is established
			NutrientIndex = 0;
			getline(OpenCSV, Date, ','); //help with using getline was from "Stack Overflow – C++ using getline with CSV"
			getline(OpenCSV, FoodName, ',');//help with using getline was from "Stack Overflow – C++ using getline with CSV"
			getline(OpenCSV, Record, '\n'); //Read in the data record into the Record variable so it can be parsed 
			if (OpenCSV.eof()) { //if the file is EOF, then exit the iteration
				break;
			}
			stringstream StringStream(Record); //Initialise a stringstream object with the Record variable (stringstream help was from "GeeksforGeeks - CSV file management using C++")
			while (getline(StringStream, Value, ',')) { //while parsing through the stringstream object
				switch (NutrientIndex) //switch statement to check which Nutrient group the value is to be paired with
				{
				case (0):
					ParsedNutrient = "Carbs";
					break;
				case (1):
					ParsedNutrient = "Vitamins";
					break;
				case (2):
					ParsedNutrient = "Minerals";
					break;
				case (3):
					ParsedNutrient = "Salt";
					break;
				case (4):
					ParsedNutrient = "Proteins";
					break;
				case (5):
					ParsedNutrient = "Fats";
					break;
				case (6):
					ParsedNutrient = "Fiber";
					break;
				default:
					break;
				}
				Nutrients[NutrientIndex].Name = ParsedNutrient; //Store the Nutrient group in the struct
				Nutrients[NutrientIndex].Total = Value; //Store the nutrient value in the struct
				NutrientIndex++; //Increment the NutrientIndex to move onto the next Nutrient group
			}

			for (int i = 0; i < 6; i++) { //This algorithm is adapted from the Bubble Sort algorithm in Computer Science Programming Lecture 4 Slide 8  
				for (int j = 0; j < 6; j++) {
					if (stod(Nutrients[j].Total) < stod(Nutrients[j + 1].Total)) { //If the nutrient value is less than the next struct's value, then the current struct's data would be saved into a temporary struct and the data would be swapped
						Temp.Name = Nutrients[j].Name;
						Temp.Total = Nutrients[j].Total;
						Nutrients[j].Name = Nutrients[j + 1].Name;
						Nutrients[j].Total = Nutrients[j + 1].Total;
						Nutrients[j + 1].Name = Temp.Name;
						Nutrients[j + 1].Total = Temp.Total;
					}
				}
			}
			string HighestNutrientName = Nutrients[0].Name; //Save the first struct's data to separate variables
			string HighestNutrinetValue = Nutrients[0].Total;
			string LowestNutrientName = Nutrients[6].Name; //Save the last struct's data to separate variables
			string LowestNutrientValue = Nutrients[6].Total;

			if (HighestNutrientName == "Carbs") { //This selection section will check what the nutrient group is in the first struct and assign advice and warnings appropriately
				SystemWarning = "Can lead to weight gain and health complications";
				SystemAdvice = "Try to swap out carb-heavy foods for foods with less levels of carbs";
			}
			else if ((HighestNutrientName == "Vitamins") || (HighestNutrientName == "Minerals")) {
				SystemWarning = "Can lead to symptoms such as nausea, stomach cramps or fatigue";
				SystemAdvice = "Try to regulate how many grams of " + gcnew String(HighestNutrientName.c_str()) + " you are eating and balance with other food groups";
			}
			else if (HighestNutrientName == "Salt") {
				SystemWarning = "Can lead to an increase of your blood pressure, which can lead to health complications";
				SystemAdvice = "Try to reduce the amount of salt you are eating with your meals";
			}
			else if (HighestNutrientName == "Proteins") {
				SystemWarning = "Can lead to weight gain, as unused protein would be converted to fat";
				SystemAdvice = "Try to increase exercise in order to use the protein or lower the amount of protein you are eating";
			}
			else if (HighestNutrientName == "Fats") {
				SystemWarning = "Can lead to weight gain and health complications";
				SystemAdvice = "Try to reduce the amount of fats you are eating with your meals";
			}
			else if (HighestNutrientName == "Fiber") {
				SystemWarning = "Can lead to bloating and nausea";
				SystemAdvice = "Try to reduce the amount of fibers you are eating";
			}
			//The below MessageBox shows the user what the largest and smallest nutrient group is each food item, displaying warnings and advice to the user for eating/drinking too much of the largest nutrient group
			MessageBox::Show(gcnew String(FoodName.c_str()) + "\n" + "The nutrient group with the highest value is " + gcnew String(HighestNutrientName.c_str()) + " with a value of " + gcnew String(HighestNutrinetValue.c_str()) + "g - " + SystemWarning + "\n" + SystemAdvice + "\n" + "The nutrient group with the lowest value is " + gcnew String(LowestNutrientName.c_str()) + " with a value of " + gcnew String(LowestNutrientValue.c_str()) + "g\n", "Food Information");
			SystemFoodName = gcnew String(FoodName.c_str()); //Conversion from std string to System string (help from the C++/CLR documentation)
			lstNutrients->Items->Add("Ordered Nutrients for " + SystemFoodName + ":"); //Display the heading for the food item name
			for (int i = 0; i < 7; i++) { //Iterate through the ordered array of structs and display the data  
				String^ NutrientName = gcnew String(Nutrients[i].Name.c_str()); //Conversion from std string to System string (help from the C++/CLR documentation)
				String^ NutrientTotal = gcnew String(Nutrients[i].Total.c_str());
				lstNutrients->Items->Add(NutrientName + "		" + NutrientTotal);
			}
			lstNutrients->Items->Add(" "); //Add a gap in-between the food item's data so it is easier for the user to read the data
		}
		OpenCSV.close(); //Close connection to the FoodDiary.csv file
	}
	};
}
