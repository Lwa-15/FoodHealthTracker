#pragma once
#include "pch.h" //link the pre-compiled file to this file
#include <iostream>
#include <fstream>
#include <string>
#include <sstream> //links to the StringStream file so the data can be parsed after it has been read from the CSV file
#include "HomePage.h" //links the two files together so the user can navigate back to the HomePage when the "btnBack" event is executed
// Lines 11 - 91 are automatically generated by the system (except from lines 23 and 28-32)
//Comments of these generated lines of code are explanations of what the code does which I found by looking through the documentation, the explanations can be found on the "AddFoodItem.h" header file

namespace HealthFoodProject {
	using namespace std;
	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;

	public ref class FoodDiary : public System::Windows::Forms::Form
	{
	public:
		Form^ HomePage; //Lines 23 and 28-32 are adapted from code found in the video "How to switch first form to second and second to first form in GUI C++ using MS visual Studio 2013. – by Ozair Khan"
		FoodDiary(void)
		{
			InitializeComponent();
		}
		FoodDiary(Form^ HomePageShow)
		{
			HomePage = HomePageShow;
			InitializeComponent();
		}

	protected:
		~FoodDiary()
		{
			if (components)
			{
				delete components;
			}
		}
	private: System::Windows::Forms::Label^ lblFoodDiary;
	protected:
	private: System::Windows::Forms::ListBox^ lstFoodDiary;
	private: System::Windows::Forms::Button^ btnBack;

	private:
		System::ComponentModel::Container ^components;

#pragma region Windows Form Designer generated code
		void InitializeComponent(void)
		{
			this->lblFoodDiary = (gcnew System::Windows::Forms::Label());
			this->lstFoodDiary = (gcnew System::Windows::Forms::ListBox());
			this->btnBack = (gcnew System::Windows::Forms::Button());
			this->SuspendLayout();
			// lblFoodDiary
			this->lblFoodDiary->AutoSize = true;
			this->lblFoodDiary->Location = System::Drawing::Point(111, 10);
			this->lblFoodDiary->Name = L"lblFoodDiary";
			this->lblFoodDiary->Size = System::Drawing::Size(58, 13);
			this->lblFoodDiary->TabIndex = 5;
			this->lblFoodDiary->Text = L"Food Diary";
			// lstFoodDiary
			this->lstFoodDiary->FormattingEnabled = true;
			this->lstFoodDiary->Location = System::Drawing::Point(19, 40);
			this->lstFoodDiary->Name = L"lstFoodDiary";
			this->lstFoodDiary->Size = System::Drawing::Size(246, 173);
			this->lstFoodDiary->TabIndex = 4;
			// btnBack
			this->btnBack->Location = System::Drawing::Point(19, 227);
			this->btnBack->Name = L"btnBack";
			this->btnBack->Size = System::Drawing::Size(75, 23);
			this->btnBack->TabIndex = 3;
			this->btnBack->Text = L"Back";
			this->btnBack->UseVisualStyleBackColor = true;
			this->btnBack->Click += gcnew System::EventHandler(this, &FoodDiary::btnBack_Click);
			// FoodDiary
			this->AutoScaleDimensions = System::Drawing::SizeF(6, 13);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->ClientSize = System::Drawing::Size(284, 261);
			this->Controls->Add(this->lblFoodDiary);
			this->Controls->Add(this->lstFoodDiary);
			this->Controls->Add(this->btnBack);
			this->Name = L"FoodDiary";
			this->Text = L"FoodDiary";
			this->Load += gcnew System::EventHandler(this, &FoodDiary::FoodDiary_Load);
			this->ResumeLayout(false);
			this->PerformLayout();
		}
#pragma endregion
	private: System::Void btnBack_Click(System::Object^ sender, System::EventArgs^ e) { //This method is executed when the object "btnBack" is clicked and hides the FoodDiary form and loads the HomePage form
		this->Hide(); //Lines 93 and 94 are adapted from code found in the video "How to switch first form to second and second to first form in GUI C++ using MS visual Studio 2013. – by Ozair Khan"
		HomePage->Show();
	}
	private: System::Void FoodDiary_Load(System::Object^ sender, System::EventArgs^ e) { //This method is executed when the object "btnFoodDiary" is clicked on the HomePage form
		ifstream OpenCSV; //Declares a variable in order to connect to a CSV file to read from 
		OpenCSV.open("CSV Files/FoodDiary.csv"); //Establishes a connection to FoodDiary.csv in order to read data from it
		string Record; //Lines 99 and 100 declares the variables to store thye data being read form the file 
		string Value, Date, FoodName;
		int NutrientIndex = 0; //This variable is used in order to establish which nutrient group the data belongs to
		while (OpenCSV.good()) { //While there is a connection to the CSV file and while it is not EOF 
			NutrientIndex = 0; //Set the NutrientIndex to 0 when a new line in the file is read
			getline(OpenCSV, Record, '\n'); //Read in the record to parse through
			if (OpenCSV.eof()) { //If the file is EOF, then the while loop will stop
				break;
			}
			stringstream ss(Record); //Establish a StringStream object from the value of the Value variable (stringstream help was from "GeeksforGeeks - CSV file management using C++")
			getline(ss, Date, ','); //Parse the date from the ss object
			getline(ss, FoodName, ','); //Parse the Food Name from the ss object
			String^ SystemDate = gcnew String(Date.c_str()); //Convert the std string Date value to a System string (help from the C++/CLR documentation)
			lstFoodDiary->Items->Add(SystemDate); //Add the Date to the ListBox 
			String^ SystemName = gcnew String(FoodName.c_str()); //Conversion from a std string to a System string (help from the C++/CLR documentation)
			lstFoodDiary->Items->Add(SystemName);
			String^ Nutrient;
			while (getline(ss, Value, ',')) { //while parsing through the ss object to the next comma, storing the value into the Value variable
				switch (NutrientIndex) //switch statement checks which iteration the parsing is going through and assigns the Nutrient name to the variable
				{
				case (0):
					Nutrient = "Carbs";
					break;
				case (1):
					Nutrient = "Vitamins";
					break;
				case (2):
					Nutrient = "Minerals";
					break;
				case (3):
					Nutrient = "Salt";
					break;
				case (4):
					Nutrient = "Proteins";
					break;
				case (5):
					Nutrient = "Fats";
					break;
				case (6):
					Nutrient = "Fiber";
					break;
				default:
					break;
				}
				String^ SystemItem = gcnew String(Value.c_str()); //Convert the std string to a System string so it can be used in the ListBox (help from the C++/CLR documentation)
				lstFoodDiary->Items->Add("\t" + Nutrient + ": " + SystemItem); //Adds the Nutrient name and value to the ListBox
				NutrientIndex++; //Increment the Index so the next Nutrient name can match the value 
			}
			lstFoodDiary->Items->Add(" "); //Add a blank space between the values of one food item and the next, so it can be read easier by the user
		}
	}
	};
}
