#pragma once
#include "pch.h" //link the pre-compiled file to this file
#include <iostream>
#include <math.h> //included so mathimatical functions can be used
#include <string>
#include <vector>//included so vectors can be used in this file
#include <ctime>//allows access to the date and time
#include <msclr\marshal.h>//allows for Systems strings to be converted to std strings - from "C++ .NET Convert System::String to std::string"
#include <msclr\marshal_cppstd.h>
#include "HomePage.h" //links the two forms together so the user can navigate back to the HomePage form
//Lines 13-193 are automatically generated by the system (except from lines 26 and 31-35)
//Comments of these generated lines of code are explanations of what the code does which I found by looking through the documentation, these explanations can be found on the "AddFoodItem.h" header file
namespace HealthFoodProject {
	using namespace std;
	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;
	using namespace System::Windows::Forms::DataVisualization::Charting;
	
	public ref class HealthPage : public System::Windows::Forms::Form
	{
	public:
		Form^ HomePage;
		HealthPage(void)
		{
			InitializeComponent();
		}
		HealthPage(Form^ HomePageShow) //Lines 26 and 31-35 are adapted from code found in the video "How to switch first form to second and second to first form in GUI C++ using MS visual Studio 2013. – by Ozair Khan"
		{
			HomePage = HomePageShow;
			InitializeComponent();
		}

	protected:
		~HealthPage()
		{
			if (components)
			{
				delete components;
			}
		}
	private: System::Windows::Forms::Button^ btnCalculate;
	protected:

	protected:
	private: System::Windows::Forms::Label^ lblBMITitle;
	private: System::Windows::Forms::Label^ lblHeight;
	private: System::Windows::Forms::Label^ lblWeight;
	private: System::Windows::Forms::Label^ lblBMI;
	private: System::Windows::Forms::TextBox^ txtHeight;
	private: System::Windows::Forms::TextBox^ txtWeight;

	private: System::Windows::Forms::Label^ lblBMIOutput;
	private: System::Windows::Forms::DataVisualization::Charting::Chart^ chartLine;
	private: System::Windows::Forms::Button^ btnBack;
	private: System::Windows::Forms::Button^ btnClear;



	protected:

	private:
		System::ComponentModel::Container ^components;

#pragma region Windows Form Designer generated code
		void InitializeComponent(void)
		{
			System::Windows::Forms::DataVisualization::Charting::ChartArea^ chartArea1 = (gcnew System::Windows::Forms::DataVisualization::Charting::ChartArea());
			System::Windows::Forms::DataVisualization::Charting::Legend^ legend1 = (gcnew System::Windows::Forms::DataVisualization::Charting::Legend());
			System::Windows::Forms::DataVisualization::Charting::Series^ series1 = (gcnew System::Windows::Forms::DataVisualization::Charting::Series());
			this->btnCalculate = (gcnew System::Windows::Forms::Button());
			this->lblBMITitle = (gcnew System::Windows::Forms::Label());
			this->lblHeight = (gcnew System::Windows::Forms::Label());
			this->lblWeight = (gcnew System::Windows::Forms::Label());
			this->lblBMI = (gcnew System::Windows::Forms::Label());
			this->txtHeight = (gcnew System::Windows::Forms::TextBox());
			this->txtWeight = (gcnew System::Windows::Forms::TextBox());
			this->lblBMIOutput = (gcnew System::Windows::Forms::Label());
			this->chartLine = (gcnew System::Windows::Forms::DataVisualization::Charting::Chart());
			this->btnBack = (gcnew System::Windows::Forms::Button());
			this->btnClear = (gcnew System::Windows::Forms::Button());
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->chartLine))->BeginInit();
			this->SuspendLayout();
			// btnCalculate
			this->btnCalculate->Location = System::Drawing::Point(12, 128);
			this->btnCalculate->Name = L"btnCalculate";
			this->btnCalculate->Size = System::Drawing::Size(75, 23);
			this->btnCalculate->TabIndex = 0;
			this->btnCalculate->Text = L"Calculate";
			this->btnCalculate->UseVisualStyleBackColor = true;
			this->btnCalculate->Click += gcnew System::EventHandler(this, &HealthPage::btnCalculate_Click);
			// lblBMITitle
			this->lblBMITitle->AutoSize = true;
			this->lblBMITitle->Location = System::Drawing::Point(124, 21);
			this->lblBMITitle->Name = L"lblBMITitle";
			this->lblBMITitle->Size = System::Drawing::Size(26, 13);
			this->lblBMITitle->TabIndex = 1;
			this->lblBMITitle->Text = L"BMI";
			// lblHeight
			this->lblHeight->AutoSize = true;
			this->lblHeight->Location = System::Drawing::Point(9, 41);
			this->lblHeight->Name = L"lblHeight";
			this->lblHeight->Size = System::Drawing::Size(58, 13);
			this->lblHeight->TabIndex = 2;
			this->lblHeight->Text = L"Height (m):";
			// lblWeight
			this->lblWeight->AutoSize = true;
			this->lblWeight->Location = System::Drawing::Point(9, 70);
			this->lblWeight->Name = L"lblWeight";
			this->lblWeight->Size = System::Drawing::Size(65, 13);
			this->lblWeight->TabIndex = 3;
			this->lblWeight->Text = L"Weight (kg):";
			// lblBMI
			this->lblBMI->AutoSize = true;
			this->lblBMI->Location = System::Drawing::Point(9, 103);
			this->lblBMI->Name = L"lblBMI";
			this->lblBMI->Size = System::Drawing::Size(29, 13);
			this->lblBMI->TabIndex = 4;
			this->lblBMI->Text = L"BMI:";
			// txtHeight
			this->txtHeight->Location = System::Drawing::Point(73, 38);
			this->txtHeight->Name = L"txtHeight";
			this->txtHeight->Size = System::Drawing::Size(100, 20);
			this->txtHeight->TabIndex = 5;
			// txtWeight
			this->txtWeight->Location = System::Drawing::Point(73, 67);
			this->txtWeight->Name = L"txtWeight";
			this->txtWeight->Size = System::Drawing::Size(100, 20);
			this->txtWeight->TabIndex = 6;
			// lblBMIOutput
			this->lblBMIOutput->AutoSize = true;
			this->lblBMIOutput->Location = System::Drawing::Point(53, 103);
			this->lblBMIOutput->Name = L"lblBMIOutput";
			this->lblBMIOutput->Size = System::Drawing::Size(0, 13);
			this->lblBMIOutput->TabIndex = 7;
			// chartLine
			chartArea1->Name = L"ChartArea1";
			this->chartLine->ChartAreas->Add(chartArea1);
			legend1->Name = L"Legend1";
			this->chartLine->Legends->Add(legend1);
			this->chartLine->Location = System::Drawing::Point(12, 157);
			this->chartLine->Name = L"chartLine";
			series1->ChartArea = L"ChartArea1";
			series1->ChartType = System::Windows::Forms::DataVisualization::Charting::SeriesChartType::Line;
			series1->Legend = L"Legend1";
			series1->Name = L"BMI Values";
			this->chartLine->Series->Add(series1);
			this->chartLine->Size = System::Drawing::Size(385, 158);
			this->chartLine->TabIndex = 8;
			this->chartLine->Text = L"chart1"; 
			// btnBack
			this->btnBack->Location = System::Drawing::Point(111, 128);
			this->btnBack->Name = L"btnBack";
			this->btnBack->Size = System::Drawing::Size(75, 23);
			this->btnBack->TabIndex = 9;
			this->btnBack->Text = L"Back";
			this->btnBack->UseVisualStyleBackColor = true;
			this->btnBack->Click += gcnew System::EventHandler(this, &HealthPage::btnBack_Click);
			// btnClear
			this->btnClear->Location = System::Drawing::Point(212, 128);
			this->btnClear->Name = L"btnClear";
			this->btnClear->Size = System::Drawing::Size(75, 23);
			this->btnClear->TabIndex = 10;
			this->btnClear->Text = L"Clear";
			this->btnClear->UseVisualStyleBackColor = true;
			this->btnClear->Click += gcnew System::EventHandler(this, &HealthPage::btnClear_Click);
			// HealthPage
			this->AutoScaleDimensions = System::Drawing::SizeF(6, 13);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->ClientSize = System::Drawing::Size(409, 327);
			this->Controls->Add(this->btnClear);
			this->Controls->Add(this->btnBack);
			this->Controls->Add(this->chartLine);
			this->Controls->Add(this->lblBMIOutput);
			this->Controls->Add(this->txtWeight);
			this->Controls->Add(this->txtHeight);
			this->Controls->Add(this->lblBMI);
			this->Controls->Add(this->lblWeight);
			this->Controls->Add(this->lblHeight);
			this->Controls->Add(this->lblBMITitle);
			this->Controls->Add(this->btnCalculate);
			this->Name = L"HealthPage";
			this->Text = L"HealthPage";
			this->Load += gcnew System::EventHandler(this, &HealthPage::HealthPage_Load);
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->chartLine))->EndInit();
			this->ResumeLayout(false);
			this->PerformLayout();

		}
#pragma endregion
	private: System::Void HealthPage_Load(System::Object^ sender, System::EventArgs^ e) { //This method runs when the object btnHealthPage is clicked on the HomePage form
		vector<string> RAW_BMI; //Initialises a vector to store the BMI values from the CSV file
		vector<string> BMIDates; //Initialises a vector to store the dates for the BMI values from the CSV file
		ifstream OpenCSV; //Decalres a variable to connect to a CSV file in order to read from it
		string Value; //The following two variables are what are going to be read into from the CSV file
		string Date;
		OpenCSV.open("CSV Files/BMI.csv"); //Establishes a connection to read from the CSV file
		while (OpenCSV.good()) { //While the connection is open and is not EOF
			getline(OpenCSV, Date, ','); //Read from OpenCSV into the Date variable until a comma is reached (help with using getline was from "Stack Overflow – C++ using getline with CSV")
			getline(OpenCSV, Value, '\n');//Read from OpenCSV into the Value variable until the end of the line
			BMIDates.push_back(Date); //Push the Date variable into the vector
			RAW_BMI.push_back(Value); //Push the Value variable into the vector
		}
		OpenCSV.close(); //Close the connection to the CSV file
		//the use of "size_t" on Line 209 is a fix to a warning "signed/unsigned mismatch" found on Stack Overflow "How do I deal with “signed/unsigned mismatch” warnings (C4018)?"
		for (size_t VectorIndex = 0; VectorIndex < RAW_BMI.size(); VectorIndex++) { //Read each value from the vectors and add XY points onto the line graph 
			String^ SystemDate = gcnew String(BMIDates.at(VectorIndex).c_str()); //Convert std string to System string so the data can be included into the line graph (help from the C++/CLR documentation)
			String^ BMI = gcnew String(RAW_BMI.at(VectorIndex).c_str()); //Conversion from std string to System string (help from the C++/CLR documentation)
			this->chartLine->Series["BMI Values"]->Points->AddXY(SystemDate, BMI); //Add XY points of the date (X-axis) and the BMI (Y-axis) value into the line graph (Line 212 is adapted from code found in the video "Visual C++ Tutorial 29 -Windows Forms Application: How to use Chart /Graph in Visual C++ - by ProgrammingKnowledge"
		}
	}
private: System::Void btnCalculate_Click(System::Object^ sender, System::EventArgs^ e) { //This method is executed when the user clicks on the object btnCalculate and calculates the user's BMI before both writing it to the CSV file and appending it onto the line graph
	if ((txtHeight->Text == "") || (txtWeight->Text == "")) { //Checks whether the textboxes are empty (Presence Check Data Validation)
		MessageBox::Show("Please ensure that all textboxes are filled in", "Presence Error"); //Error message
	}
	else { //If the textboxes are not empty, then the BMI value will be calculated, appended to the file and to the line graph
		ofstream WriteCSV; //Declares the variable WriteCSV for appending data to the CSV file
		WriteCSV.open("CSV Files/BMI.csv", ios_base::app); //Establishes a connection to append to BMI.csv
		SYSTEMTIME RawTodayDate; //Decalres a variable for a datetime value to be stored in - Lines 222-224 are adapted using help from the SYSTEMTIME documentation 
		GetLocalTime(&RawTodayDate); //Gets the system date and time for the data
		String^ SystemTodayDate = RawTodayDate.wDay + "/" + RawTodayDate.wMonth + "/" + RawTodayDate.wYear; //Concatenates strings to make the date in the pattern "XX/XX/XXXX"
		string TodayDate = msclr::interop::marshal_as<std::string>(SystemTodayDate); //Uses the Marshal file to convert a System string to a std string - adapted from "C++ .NET Convert System::String to std::string"
		double Height = Convert::ToDouble(txtHeight->Text); //Converts the System string value in the textboxes to a double (Lines 225 and 226)
		double Weight = Convert::ToDouble(txtWeight->Text);
		double BMI = Weight / pow(Height, 2); //Calculates the BMI value
		string Group;
		if (BMI < 18.5) { //Checks which condition satisfies the calculated value and assigns a group to the Group variable
			Group = "Underweight";
		}
		else if ((18.5 < BMI) || (BMI < 25)) {
			Group = "Normal Weight";
		}
		else if ((25 < BMI) || (BMI < 30)) {
			Group = "Overweight";
		}
		else if (BMI > 30) {
			Group = "Obese";
		}
		string StringBMI = to_string(BMI); //Converts double back to std string so it can be appended to BMI.csv
		String^ SystemBMI = gcnew String(StringBMI.c_str()); //Converts std string to System string so the value and group can be outputted to the user on the form (help from the C++/CLR documentation)
		String^ SystemGroup = gcnew String(Group.c_str());
		lblBMIOutput->Text = (SystemBMI + "     " + SystemGroup); //Outputs the data to the user
		WriteCSV << TodayDate << "," << StringBMI << "\n"; //Writes the date and the value to BMI.csv
		WriteCSV.close(); //Disconnects from BMI.csv
		this->chartLine->Series["BMI Values"]->Points->AddXY(SystemTodayDate, BMI); //Appends the new data to the line graph by passing in XY values (Line 248 is adapted from code found in the video "Visual C++ Tutorial 29 -Windows Forms Application: How to use Chart /Graph in Visual C++ - by ProgrammingKnowledge"
	}
	
}
private: System::Void btnBack_Click(System::Object^ sender, System::EventArgs^ e) { //This method is executed when the object "btnBack" is clicked and will hide the HealthPage form and open the HomePage form
	this->Hide(); //Lines 253 and 254 are adapted from code found in the video "How to switch first form to second and second to first form in GUI C++ using MS visual Studio 2013. – by Ozair Khan"
	HomePage->Show();
}
private: System::Void btnClear_Click(System::Object^ sender, System::EventArgs^ e) { //This method is executed when the object "btnClear" is clicked and will set the text value of the textboxes to ""
	txtHeight->Text = "";
	txtWeight->Text = "";
	lblBMIOutput->Text = "";
}
};
}
