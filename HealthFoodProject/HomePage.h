#pragma once
#include "pch.h" //link the pre-compiled file to this file
#include "NutrientSort.h" //links the files together so navigation can occur when the events are executed when the buttons are pressed (Lines 3-6)
#include "HealthPage.h"
#include "FoodDiary.h"
#include "AddFoodItem.h"
// Lines 9 - 124 are automatically generated by the system(except from lines 20 and 25- 29)
//Comments of these generated lines of code are explanations of what the code does which I found by looking through the documentation, these explanations can be found in the "AddFoodItem.h" header file
namespace HealthFoodProject {
	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;

	public ref class HomePage : public System::Windows::Forms::Form
	{
	public:
		Form^ Login;
		HomePage(void)
		{
			InitializeComponent();
		}
		HomePage(Form^ LoginShow)
		{
			Login = LoginShow;
			InitializeComponent();
		}
		
	protected:
		~HomePage()
		{
			if (components)
			{
				delete components;
			}
		}
	private: System::Windows::Forms::Button^ btnHealthPage;
	protected:
	private: System::Windows::Forms::Button^ btnLogout;
	private: System::Windows::Forms::Button^ btnAddFoodItem;
	private: System::Windows::Forms::Button^ btnNutrientInfo;
	private: System::Windows::Forms::Button^ btnFoodDiary;
	private: System::Windows::Forms::Label^ lblTitle;

	private:
		System::ComponentModel::Container ^components;

#pragma region Windows Form Designer generated code
		void InitializeComponent(void)
		{
			this->btnHealthPage = (gcnew System::Windows::Forms::Button());
			this->btnLogout = (gcnew System::Windows::Forms::Button());
			this->btnAddFoodItem = (gcnew System::Windows::Forms::Button());
			this->btnNutrientInfo = (gcnew System::Windows::Forms::Button());
			this->btnFoodDiary = (gcnew System::Windows::Forms::Button());
			this->lblTitle = (gcnew System::Windows::Forms::Label());
			this->SuspendLayout();
			// btnHealthPage
			this->btnHealthPage->Location = System::Drawing::Point(153, 136);
			this->btnHealthPage->Name = L"btnHealthPage";
			this->btnHealthPage->Size = System::Drawing::Size(75, 23);
			this->btnHealthPage->TabIndex = 10;
			this->btnHealthPage->Text = L"Health Page";
			this->btnHealthPage->UseVisualStyleBackColor = true;
			this->btnHealthPage->Click += gcnew System::EventHandler(this, &HomePage::btnHealthPage_Click);
			// btnLogout
			this->btnLogout->Location = System::Drawing::Point(186, 198);
			this->btnLogout->Name = L"btnLogout";
			this->btnLogout->Size = System::Drawing::Size(75, 23);
			this->btnLogout->TabIndex = 9;
			this->btnLogout->Text = L"Logout";
			this->btnLogout->UseVisualStyleBackColor = true;
			this->btnLogout->Click += gcnew System::EventHandler(this, &HomePage::btnLogout_Click);
			// btnAddFoodItem
			this->btnAddFoodItem->Location = System::Drawing::Point(23, 39);
			this->btnAddFoodItem->Name = L"btnAddFoodItem";
			this->btnAddFoodItem->Size = System::Drawing::Size(75, 40);
			this->btnAddFoodItem->TabIndex = 8;
			this->btnAddFoodItem->Text = L"Add Food Item";
			this->btnAddFoodItem->UseVisualStyleBackColor = true;
			this->btnAddFoodItem->Click += gcnew System::EventHandler(this, &HomePage::btnAddFoodItem_Click);
			// btnNutrientInfo
			this->btnNutrientInfo->Location = System::Drawing::Point(153, 39);
			this->btnNutrientInfo->Name = L"btnNutrientInfo";
			this->btnNutrientInfo->Size = System::Drawing::Size(75, 40);
			this->btnNutrientInfo->TabIndex = 7;
			this->btnNutrientInfo->Text = L"Nutrient Sort";
			this->btnNutrientInfo->UseVisualStyleBackColor = true;
			this->btnNutrientInfo->Click += gcnew System::EventHandler(this, &HomePage::btnNutrientInfo_Click);
			// btnFoodDiary
			this->btnFoodDiary->Location = System::Drawing::Point(23, 136);
			this->btnFoodDiary->Name = L"btnFoodDiary";
			this->btnFoodDiary->Size = System::Drawing::Size(75, 23);
			this->btnFoodDiary->TabIndex = 6;
			this->btnFoodDiary->Text = L"Food Diary";
			this->btnFoodDiary->UseVisualStyleBackColor = true;
			this->btnFoodDiary->Click += gcnew System::EventHandler(this, &HomePage::btnFoodDiary_Click);
			// lblTitle
			this->lblTitle->AutoSize = true;
			this->lblTitle->Location = System::Drawing::Point(70, 9);
			this->lblTitle->Name = L"lblTitle";
			this->lblTitle->Size = System::Drawing::Size(131, 13);
			this->lblTitle->TabIndex = 11;
			this->lblTitle->Text = L"Food and Health Manager";
			// HomePage
			this->AutoScaleDimensions = System::Drawing::SizeF(6, 13);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->ClientSize = System::Drawing::Size(284, 261);
			this->Controls->Add(this->lblTitle);
			this->Controls->Add(this->btnHealthPage);
			this->Controls->Add(this->btnLogout);
			this->Controls->Add(this->btnAddFoodItem);
			this->Controls->Add(this->btnNutrientInfo);
			this->Controls->Add(this->btnFoodDiary);
			this->Name = L"HomePage";
			this->Text = L"HomePage";
			this->Load += gcnew System::EventHandler(this, &HomePage::HomePage_Load);
			this->ResumeLayout(false);
			this->PerformLayout();

		}
#pragma endregion
	private: System::Void btnAddFoodItem_Click(System::Object^ sender, System::EventArgs^ e) { //This method is executed when the object "btnAddFoodItem" is clicked and this hides the HomePage and displays the AddFoodItem form
		this->Hide(); //Lines 126-128 are adapted from code found in the video "Visual C++ Tutorial 6 -Windows Forms Application: How To Open A Second Form – by ProgrammingKnowledge"
		AddFoodItem ^FoodItem = gcnew AddFoodItem(this); //Line 127 must be run for the object "btnBack" to work on the AddFoodItem form, as this establishes an object which is referenced on the AddFoodItem form (lines 30-34 and 267)
		FoodItem->ShowDialog();
	}
	private: System::Void btnNutrientInfo_Click(System::Object^ sender, System::EventArgs^ e) { //This method is executed when the object "btnNutrientInfo" is clicked and this hides the HomePage and displays the NutrientSort form
		this->Hide(); //Lines 131-133 are adapted from code found in the video "Visual C++ Tutorial 6 -Windows Forms Application: How To Open A Second Form – by ProgrammingKnowledge"
		NutrientSort ^Nutrient = gcnew NutrientSort(this); //Line 132 must be run for the object "btnBack" to work on the NutrientSort form, as this establishes an object which is referenced on the NutrientSort form (lines 31-35 and 98)
		Nutrient->ShowDialog();
	}
	private: System::Void btnFoodDiary_Click(System::Object^ sender, System::EventArgs^ e) { //This method is executed when the object "btnFoodDiary" is clicked and this hides the HomePage and displays the FoodDiary form
		this->Hide(); //Lines 136-138 are adapted from code found in the video "Visual C++ Tutorial 6 -Windows Forms Application: How To Open A Second Form – by ProgrammingKnowledge"
		FoodDiary ^Diary = gcnew FoodDiary(this); //Line 137 must be run for the object "btnBack" to work on the FoodDiary form, as this establishes an object which is referenced on the FoodDiary form (lines 30-34 and 267)
		Diary->ShowDialog();
	}
	private: System::Void btnHealthPage_Click(System::Object^ sender, System::EventArgs^ e) { //This method is executed when the object "btnHealthPage" is clicked and this hides the HomePage and displays the HealthPage form
		this->Hide(); //Lines 141-143 are adapted from code found in the video "Visual C++ Tutorial 6 -Windows Forms Application: How To Open A Second Form – by ProgrammingKnowledge"
		HealthPage ^Health = gcnew HealthPage(this); //Line 142 must be run for the object "btnBack" to work on the HealthPage form, as this establishes an object which is referenced on the HealthPage form (lines 31-35 and 253)
		Health->ShowDialog();
	}
	private: System::Void btnLogout_Click(System::Object^ sender, System::EventArgs^ e) { //This method is executed when the object "btnLogout" is clicked and this hides the HomePage and displays the Login form
		this->Hide(); //Lines 146 and 147 are adapted from code found in the video "Visual C++ Tutorial 6 -Windows Forms Application: How To Open A Second Form – by ProgrammingKnowledge"
		Login->Show(); //The object "btnLogout" will only work if the user has navigated from the Login form to the HomePage form, as an object would be established in the Login form when navigating from the Login form to the HomePage form 
	}
	private: System::Void HomePage_Load(System::Object^ sender, System::EventArgs^ e) {
	}
};
}
